name: Build and deploy PHP to AWS using CodeDeploy

on:
  push:
    branches:
      - $default-branch
  workflow_dispatch:

env:
  PHP_VERSION: '8.3' # To customize, set this to the PHP version to use

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 22.x ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@7c0b4c8c8ebed23eca9ec2802474895d105b11bc
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@87d74d4732ddb824259d80c8a508c0124bf1c673
        with:
          files: 'composer.json'

      - name: Get Composer Cache Directory
        id: composer-cache
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        if: steps.check_files.outputs.files_exists == 'true'
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress --ignore-platform-reqs

      - name: Use Node.js ${{ matrix.node-version }} and build
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
#      - run: npm test

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: php-app

      - name: unzip artifact for deployment
        run: unzip release.zip

      - name: 'Deploy to AWS'
        id: deploy-to-webapp
        # You may pin to the exact commit or the version.
        # uses: sourcetoad/aws-codedeploy-action@0d44152a7073d8a249d9194d517ca16d06e0b6b5
        uses: sourcetoad/aws-codedeploy-action@v1.3.0
        with:
          # AWS Access Key (Required if no aws-actions/configure-aws-credentials)
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }} # To customize, set in GitHub secrets
          # AWS Secret Key (Required if no aws-actions/configure-aws-credentials)
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }} # To customize, set in GitHub secrets
          # AWS Region
          aws_region: eu-west-3
          # S3 Bucket for CodeDeploy Assets
          s3_bucket: example # To customize
          # S3 Folder for ZIP.
          s3_folder: deployments/production
          excluded_files: '.git/* .env storage/framework/cache/* node_modules/*'
          # AWS CodeDeploy Application Name
          codedeploy_name: example # To customize
          # AWS CodeDeploy Application Group
          codedeploy_group: example-depl_grp # To customize

      # delete-artifact
      - uses: geekyeggo/delete-artifact@v1
        with:
          name: php-app
